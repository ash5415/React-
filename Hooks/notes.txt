                                        Hooks
                                    ============

functional components in react hooks :
 
    1. functional components with hooks are simpler, as there is no need to define constructor, this 

       keyword, lifecycle methods, destructing the same values at multiple times.

    2. Hooks does'nt split the components as per lifecycle methods, rather they split a component into smaller

       functions based on related pieces.

    3. the organize logic inside a component into reusable isolated units.

    4. they are easier to refactor and test, allows writers to write clear and concise the code.

    5. they mainly deal with state, effects and context in a react application.

    6. hooks we are add to react in 16.8 

Basic Hooks:

  ===> the basic hooks are used to implement the features of stateful components in functional components are :

           1. useState Hook

           2. useEffect hook

           3. useContext hook

useState Hook :

    ==> useState hook is used to manage local states of a functional component.

    ==> the useState hook accepts an initial state as an argument and return 2 variables.

    ==> the first variable is the actual state and second variable is a function to update the state value.

    syntax:

       import{useState} from 'react';

                           ----------> setter function
                           '
         const[count, setCount]= useState(initialState);
                  '
                  '
                  '
   newState<------                              '
                                                '
                                                '----> initialState
           const initialState = 0; 
 
the useState hook replace the this.state() and this.setState() method used in class based component.

useEffect:

      ===> useEffect hook is used to manages the state and side effects such as interactions with the browser and 
            
        or DOM API and external API like data fetching,timers,subscriptions, request and more.

    ===> the useEffect hook is replace the componentDidMount, componentDidUpdate and componentWillUnmount methods.

    ===> componentDidMount cna be implemented by using an effect hook with an empty array passed as the second 
      
         argument.

useContext Hook :

        ===> react application can have multiple nested components.

        ===> in case if the passing the props, you can pass props only from parent component to child component

        ===> props from an app component can directly passed to any other component.

        ===> when the application groves bigger it's a very hard task to maintain the data to avoid 

             such kind of complex issues react introduced a hook called useContext hook.

        ===> context provides a way to pass dat through the component tree without having to pass down manually

             at multiple levels.

        ===> react contexts consists of a provider and consumer, provider is defined to pass the context value

             and consumer defined to accept the context value.

        ===> the useContext hook is used to deal with context in react,it accept a context value and return the 

             context value.  

custom Hook:

     ===> A custom hook is a javascript function whose name is starts with "use"

     ===> A custom hook is call other hooks as per requirement.

     ===> you can even take advantage of built-in hooks and build your own hook.

     ===> there are mainly used to share logic between two or higher components.
     