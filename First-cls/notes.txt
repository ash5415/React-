Components in react:
               ---> components are classified in to 2 types
                         1. Class based components
                         2. Functional components
Class based components:
                --> UI + logic
    constructor:
           -->  constructor is a member function of a class which is initializes the object of a class.
    super:
        --> when implementing the constructor for a react component you should cal the super props before any other statements.
        --> otherwise this.props will undefined.
        --> super method is called constructor of the parent class.
props:
     --> data pass from parent component to child component.
     --> you can pass the data 2 ways 
     --> one way is between the html tags.

Life cycle of react:
       
      --> Mounting phase they are 4 life cycle methods
      --> Mounting means putting elements into the DOM.

              1.constructor():  
                     --> A special function that will get called when a new component is created.
                     --> initializes the state and binding the event handlers.
                     --> constructor does't make the HTTP requests.

              2.getDerviedStateFromProps(props,state):
                     --> when the state of the component depends on changes in props over time.
                     --> does't make the HTTP requests.
                     --> return new state or null.

              3.render():
                     --> the render method is required and will always called and other are optional.
                     --> read props and state and return the JSX.
                     --> do not change the state or interact with DOM.
                     --> children component life cycle methods are also executed.

              4.componentDidMount():
                     -->invoked immediately after a component and all its children components have been render to the DOM.
                     --> cause side effects and loading data in to the DOM.

example:
         import React from 'react';
         import ReactDOM from 'react-dom/client';

         class Header extends React.Component {
               constructor(props) {
                   super(props);
               this.state = {favoritecolor: "red"};
             }
        static getDerivedStateFromProps(props, state) {
             return {favoritecolor: props.favcol };
       }
         render() {
           return (
          <h1>My Favorite Color is {this.state.favoritecolor}</h1>
        );
      }
    }

const root = ReactDOM.createRoot(document.getElementById('root'));
root.render(<Header favcol="yellow"/>);

              
Updating life cycle methods:
          --> Updating is the phase where 5 life cycle methods is there 
                        1.getDerivedStateFromProps():
                             --> when the state of the component depends on changes in props over time.
                             --> does't make the HTTP requests.
                             --> return new state or null.
                        2.shouldComponentUpdate(nextprops & nextstate):
                            -->In the shouldComponentUpdate() method you can return a Boolean value that specifies 
                               whether React should continue with the rendering or not.
                            --> The default value is true.
                            --> if the component should re-render or not.
                            --> performance optimization
                            --> does't make the HTTP requests.

                        3.render():
                             --> the render method is required and will always called and other are optional.
                             --> read props and state and return the JSX.
                             --> do not change the state or interact with DOM.
                             --> children component life cycle methods are also executed.

                        4.getSnapshotBeforeUpdate(prevProps, prevState):
                              --> called right before the changes from the virtual DOM are to be reflected in the DOM.
                              --> this method capture some information form the DOM.
                              --> this method return null or return a value.
                              --> return value will be passed as the third parameter to the next method. 
                              --> If the getSnapshotBeforeUpdate() method is present, you should also include the
                                        componentDidUpdate() method, otherwise you will get an error.

                        5.componentDidUpdate(prevProps,prevState,snapshot):
                                 --> called after the render is finished in the re-render life-cycle.
                                 --> cause side effects. 



